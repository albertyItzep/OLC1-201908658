
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import AcccionesGramaticales.Declaraciones;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\004\005\000\002\013" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\005\006\000\002\005\006\000\002\006\005\000\002\007" +
    "\011\000\002\007\011\000\002\007\011\000\002\007\011" +
    "\000\002\007\011\000\002\003\003\000\002\003\005\000" +
    "\002\017\004\000\002\017\006\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\011\003\000\002\014" +
    "\004\000\002\014\003\000\002\020\003\000\002\020\005" +
    "\000\002\020\003\000\002\020\005\000\002\020\003\000" +
    "\002\020\005\000\002\020\003\000\002\020\005\000\002" +
    "\020\003\000\002\020\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\007" +
    "\000\002\021\007\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\007\000\002" +
    "\021\007\000\002\022\002\000\002\002\010\000\002\023" +
    "\002\000\002\002\007\000\002\024\002\000\002\016\011" +
    "\000\002\025\002\000\002\016\010\000\002\026\002\000" +
    "\002\015\007\000\002\027\002\000\002\015\010\000\002" +
    "\015\007\000\002\015\011\000\002\015\012\000\002\015" +
    "\011\000\002\015\010\000\002\015\014\000\002\015\007" +
    "\000\002\015\011\000\002\015\011\000\002\015\012\000" +
    "\002\015\012\000\002\015\013\000\002\015\015\000\002" +
    "\015\015\000\002\015\016\000\002\015\016\000\002\030" +
    "\002\000\002\015\007\000\002\031\002\000\002\015\006" +
    "\000\002\032\002\000\002\033\002\000\002\015\014\000" +
    "\002\034\002\000\002\015\007\000\002\035\002\000\002" +
    "\015\013\000\002\015\007\000\002\015\010\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\004\004\005\001\002\000\004\002\u0118\001" +
    "\002\000\044\003\032\006\014\020\034\022\027\037\033" +
    "\040\020\043\035\050\024\054\025\057\022\062\011\067" +
    "\013\072\007\075\036\077\016\100\012\101\031\001\002" +
    "\000\110\003\uff94\005\uff94\006\uff94\012\070\013\060\014" +
    "\066\015\062\016\055\017\065\020\uff94\022\uff94\037\uff94" +
    "\040\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\050" +
    "\uff94\051\uff94\053\uff94\054\uff94\057\uff94\062\uff94\064\uff94" +
    "\067\uff94\070\uff94\071\uff94\072\uff94\074\uff94\075\uff94\076" +
    "\uff94\077\uff94\100\uff94\101\uff94\001\002\000\004\057\u010d" +
    "\001\002\000\074\003\uffd7\005\uffd7\006\uffd7\020\uffd7\022" +
    "\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\050\uffd7\051\uffd7\053\uffd7\054\uffd7\057\uffd7\062" +
    "\uffd7\064\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\074\uffd7" +
    "\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\001\002\000" +
    "\004\057\255\001\002\000\020\003\032\006\014\020\360" +
    "\022\027\035\361\036\357\057\052\001\002\000\046\003" +
    "\uffa4\006\uffa4\020\uffa4\022\uffa4\037\uffa4\040\uffa4\043\uffa4" +
    "\050\uffa4\054\uffa4\057\uffa4\062\uffa4\067\uffa4\070\uffa2\072" +
    "\uffa4\075\uffa4\077\uffa4\100\uffa4\101\uffa4\001\002\000\152" +
    "\003\ufff6\005\ufff6\006\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\034\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\057\ufff6\060\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\065\ufff6\067\ufff6\070\ufff6\071\ufff6\072" +
    "\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6" +
    "\001\002\000\074\003\uff97\005\uff97\006\uff97\020\uff97\022" +
    "\uff97\037\uff97\040\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\050\uff97\051\uff97\053\uff97\054\uff97\057\uff97\062" +
    "\uff97\064\uff97\067\uff97\070\uff97\071\uff97\072\uff97\074\uff97" +
    "\075\uff97\076\uff97\077\uff97\100\uff97\101\uff97\001\002\000" +
    "\020\003\032\006\014\020\332\022\027\035\333\036\331" +
    "\057\052\001\002\000\046\003\032\005\uffff\006\014\020" +
    "\034\022\027\037\033\040\020\043\035\050\024\054\025" +
    "\057\022\062\011\067\013\072\007\075\036\077\016\100" +
    "\012\101\031\001\002\000\022\003\032\006\014\020\047" +
    "\022\027\033\045\035\051\036\046\057\052\001\002\000" +
    "\074\003\uff95\005\uff95\006\uff95\020\uff95\022\uff95\037\uff95" +
    "\040\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\050" +
    "\uff95\051\uff95\053\uff95\054\uff95\057\uff95\062\uff95\064\uff95" +
    "\067\uff95\070\uff95\071\uff95\072\uff95\074\uff95\075\uff95\076" +
    "\uff95\077\uff95\100\uff95\101\uff95\001\002\000\114\003\ufff5" +
    "\005\ufff5\006\ufff5\011\uffe0\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\037\ufff5\040\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\050\ufff5\051" +
    "\ufff5\053\ufff5\054\ufff5\057\ufff5\061\uffe0\062\ufff5\064\ufff5" +
    "\067\ufff5\070\ufff5\071\ufff5\072\ufff5\074\ufff5\075\ufff5\076" +
    "\ufff5\077\ufff5\100\ufff5\101\ufff5\001\002\000\004\005\320" +
    "\001\002\000\014\003\032\006\014\020\034\022\027\057" +
    "\052\001\002\000\004\057\255\001\002\000\074\003\uff96" +
    "\005\uff96\006\uff96\020\uff96\022\uff96\037\uff96\040\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\050\uff96\051\uff96" +
    "\053\uff96\054\uff96\057\uff96\062\uff96\064\uff96\067\uff96\070" +
    "\uff96\071\uff96\072\uff96\074\uff96\075\uff96\076\uff96\077\uff96" +
    "\100\uff96\101\uff96\001\002\000\014\003\032\006\014\020" +
    "\034\022\027\057\052\001\002\000\006\011\244\061\243" +
    "\001\002\000\004\057\221\001\002\000\152\003\ufff4\005" +
    "\ufff4\006\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\034\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\057\ufff4\060\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\074\ufff4" +
    "\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\001\002\000" +
    "\074\003\uff93\005\uff93\006\uff93\020\uff93\022\uff93\037\uff93" +
    "\040\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\050" +
    "\uff93\051\uff93\053\uff93\054\uff93\057\uff93\062\uff93\064\uff93" +
    "\067\uff93\070\uff93\071\uff93\072\uff93\074\uff93\075\uff93\076" +
    "\uff93\077\uff93\100\uff93\101\uff93\001\002\000\014\003\032" +
    "\006\014\020\034\022\027\057\052\001\002\000\022\003" +
    "\032\006\014\020\047\022\027\033\045\035\051\036\046" +
    "\057\052\001\002\000\004\057\037\001\002\000\004\010" +
    "\040\001\002\000\050\003\032\006\014\020\034\022\027" +
    "\037\033\040\020\043\035\050\024\054\025\057\022\062" +
    "\011\067\013\071\043\072\007\073\041\075\036\077\016" +
    "\100\012\101\031\001\002\000\004\020\143\001\002\000" +
    "\050\003\032\006\014\020\034\022\027\037\033\040\020" +
    "\043\035\050\024\054\025\057\022\062\011\067\013\071" +
    "\134\072\007\075\036\076\133\077\016\100\012\101\031" +
    "\001\002\000\022\003\032\006\014\020\047\022\027\033" +
    "\045\035\051\036\046\057\052\001\002\000\106\003\uffd9" +
    "\005\uffd9\006\uffd9\020\uffd9\022\uffd9\031\127\032\126\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9\057" +
    "\uffd9\060\uffd9\062\uffd9\064\uffd9\067\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101" +
    "\uffd9\001\002\000\020\003\032\006\014\020\047\022\027" +
    "\035\051\036\046\057\052\001\002\000\006\030\120\034" +
    "\121\001\002\000\020\003\032\006\014\020\047\022\027" +
    "\035\051\036\046\057\052\001\002\000\004\060\112\001" +
    "\002\000\006\030\107\034\106\001\002\000\152\003\ufff5" +
    "\005\ufff5\006\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\034\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\057\ufff5\060\ufff5\062\ufff5\063\ufff5" +
    "\064\ufff5\065\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\074" +
    "\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\001\002" +
    "\000\034\012\070\013\060\014\066\015\062\016\055\017" +
    "\065\024\056\025\054\026\064\027\061\030\067\034\063" +
    "\060\057\001\002\000\014\003\032\006\014\020\034\022" +
    "\027\057\052\001\002\000\014\003\032\006\014\020\034" +
    "\022\027\057\052\001\002\000\014\003\032\006\014\020" +
    "\034\022\027\057\052\001\002\000\004\076\102\001\002" +
    "\000\014\003\032\006\014\020\034\022\027\057\052\001" +
    "\002\000\014\003\032\006\014\020\034\022\027\057\052" +
    "\001\002\000\014\003\032\006\014\020\034\022\027\057" +
    "\052\001\002\000\014\003\032\006\014\020\034\022\027" +
    "\057\052\001\002\000\014\003\032\006\014\020\034\022" +
    "\027\057\052\001\002\000\014\003\032\006\014\020\034" +
    "\022\027\057\052\001\002\000\014\003\032\006\014\020" +
    "\034\022\027\057\052\001\002\000\014\003\032\006\014" +
    "\020\034\022\027\057\052\001\002\000\014\003\032\006" +
    "\014\020\034\022\027\057\052\001\002\000\152\003\ufffe" +
    "\005\ufffe\006\ufffe\011\ufffe\012\ufffe\013\ufffe\014\066\015" +
    "\062\016\055\017\065\020\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\034\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\057\ufffe\060\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\074" +
    "\ufffe\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe\001\002" +
    "\000\126\003\uffef\005\uffef\006\uffef\011\uffef\012\070\013" +
    "\060\014\066\015\062\016\055\017\065\020\uffef\021\uffef" +
    "\022\uffef\031\uffef\032\uffef\037\uffef\040\uffef\041\uffef\042" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\053\uffef\054\uffef\057\uffef\060\uffef\062\uffef\064" +
    "\uffef\067\uffef\070\uffef\071\uffef\072\uffef\074\uffef\075\uffef" +
    "\076\uffef\077\uffef\100\uffef\101\uffef\001\002\000\152\003" +
    "\ufffc\005\ufffc\006\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\016\055\017\065\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\034\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\054\ufffc\057\ufffc\060\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc" +
    "\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\001" +
    "\002\000\152\003\ufff9\005\ufff9\006\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\034\ufff9\037\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\057\ufff9\060" +
    "\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\067\ufff9\070\ufff9" +
    "\071\ufff9\072\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100" +
    "\ufff9\101\ufff9\001\002\000\126\003\ufff1\005\ufff1\006\ufff1" +
    "\011\ufff1\012\070\013\060\014\066\015\062\016\055\017" +
    "\065\020\ufff1\021\ufff1\022\ufff1\031\ufff1\032\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\053\ufff1\054\ufff1\057\ufff1" +
    "\060\ufff1\062\ufff1\064\ufff1\067\ufff1\070\ufff1\071\ufff1\072" +
    "\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1" +
    "\001\002\000\126\003\uffec\005\uffec\006\uffec\011\uffec\012" +
    "\070\013\060\014\066\015\062\016\055\017\065\020\uffec" +
    "\021\uffec\022\uffec\031\uffec\032\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\053\uffec\054\uffec\057\uffec\060\uffec\062" +
    "\uffec\064\uffec\067\uffec\070\uffec\071\uffec\072\uffec\074\uffec" +
    "\075\uffec\076\uffec\077\uffec\100\uffec\101\uffec\001\002\000" +
    "\152\003\ufffb\005\ufffb\006\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\055\017\065\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\034\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\057\ufffb\060\ufffb\062" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\067\ufffb\070\ufffb\071\ufffb" +
    "\072\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb\101" +
    "\ufffb\001\002\000\126\003\ufff0\005\ufff0\006\ufff0\011\ufff0" +
    "\012\070\013\060\014\066\015\062\016\055\017\065\020" +
    "\ufff0\021\ufff0\022\ufff0\031\ufff0\032\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\053\ufff0\054\ufff0\057\ufff0\060\ufff0" +
    "\062\ufff0\064\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\074" +
    "\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\001\002" +
    "\000\152\003\ufffd\005\ufffd\006\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\066\015\062\016\055\017\065\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\034\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\057\ufffd\060\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\067\ufffd\070\ufffd\071" +
    "\ufffd\072\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\100\ufffd" +
    "\101\ufffd\001\002\000\074\003\uffad\005\uffad\006\uffad\020" +
    "\uffad\022\uffad\037\uffad\040\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\050\uffad\051\uffad\053\uffad\054\uffad\057" +
    "\uffad\062\uffad\064\uffad\067\uffad\070\uffad\071\uffad\072\uffad" +
    "\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad\001" +
    "\002\000\126\003\ufff3\005\ufff3\006\ufff3\011\ufff3\012\070" +
    "\013\060\014\066\015\062\016\055\017\065\020\ufff3\021" +
    "\ufff3\022\ufff3\031\ufff3\032\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\053\ufff3\054\ufff3\057\ufff3\060\ufff3\062\ufff3" +
    "\064\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\074\ufff3\075" +
    "\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3\001\002\000\152" +
    "\003\ufffa\005\ufffa\006\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\034\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\057\ufffa\060\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\067\ufffa\070\ufffa\071\ufffa\072" +
    "\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa" +
    "\001\002\000\126\003\ufff2\005\ufff2\006\ufff2\011\ufff2\012" +
    "\070\013\060\014\066\015\062\016\055\017\065\020\ufff2" +
    "\021\ufff2\022\ufff2\031\ufff2\032\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\053\ufff2\054\ufff2\057\ufff2\060\ufff2\062" +
    "\ufff2\064\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\074\ufff2" +
    "\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\001\002\000" +
    "\004\035\111\001\002\000\004\035\110\001\002\000\112" +
    "\003\uffed\005\uffed\006\uffed\011\uffed\020\uffed\021\uffed\022" +
    "\uffed\031\uffed\032\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051" +
    "\uffed\053\uffed\054\uffed\057\uffed\060\uffed\062\uffed\064\uffed" +
    "\067\uffed\070\uffed\071\uffed\072\uffed\074\uffed\075\uffed\076" +
    "\uffed\077\uffed\100\uffed\101\uffed\001\002\000\112\003\uffeb" +
    "\005\uffeb\006\uffeb\011\uffeb\020\uffeb\021\uffeb\022\uffeb\031" +
    "\uffeb\032\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\053" +
    "\uffeb\054\uffeb\057\uffeb\060\uffeb\062\uffeb\064\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\074\uffeb\075\uffeb\076\uffeb\077" +
    "\uffeb\100\uffeb\101\uffeb\001\002\000\004\076\113\001\002" +
    "\000\074\003\uffac\005\uffac\006\uffac\020\uffac\022\uffac\037" +
    "\uffac\040\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\050\uffac\051\uffac\053\uffac\054\uffac\057\uffac\062\uffac\064" +
    "\uffac\067\uffac\070\uffac\071\uffac\072\uffac\074\uffac\075\uffac" +
    "\076\uffac\077\uffac\100\uffac\101\uffac\001\002\000\004\021" +
    "\117\001\002\000\034\012\070\013\060\014\066\015\062" +
    "\016\055\017\065\021\116\024\056\025\054\026\064\027" +
    "\061\030\067\034\063\001\002\000\152\003\ufff8\005\ufff8" +
    "\006\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\034" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\054\ufff8\057\ufff8\060\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\001\002\000\112" +
    "\003\uffe9\005\uffe9\006\uffe9\011\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\031\uffe9\032\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\053\uffe9\054\uffe9\057\uffe9\060\uffe9\062\uffe9\064\uffe9" +
    "\067\uffe9\070\uffe9\071\uffe9\072\uffe9\074\uffe9\075\uffe9\076" +
    "\uffe9\077\uffe9\100\uffe9\101\uffe9\001\002\000\004\036\123" +
    "\001\002\000\004\036\122\001\002\000\112\003\uffea\005" +
    "\uffea\006\uffea\011\uffea\020\uffea\021\uffea\022\uffea\031\uffea" +
    "\032\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\053\uffea" +
    "\054\uffea\057\uffea\060\uffea\062\uffea\064\uffea\067\uffea\070" +
    "\uffea\071\uffea\072\uffea\074\uffea\075\uffea\076\uffea\077\uffea" +
    "\100\uffea\101\uffea\001\002\000\112\003\uffee\005\uffee\006" +
    "\uffee\011\uffee\020\uffee\021\uffee\022\uffee\031\uffee\032\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045" +
    "\uffee\046\uffee\047\uffee\050\uffee\051\uffee\053\uffee\054\uffee" +
    "\057\uffee\060\uffee\062\uffee\064\uffee\067\uffee\070\uffee\071" +
    "\uffee\072\uffee\074\uffee\075\uffee\076\uffee\077\uffee\100\uffee" +
    "\101\uffee\001\002\000\102\003\uffda\005\uffda\006\uffda\020" +
    "\uffda\022\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\053" +
    "\uffda\054\uffda\057\uffda\060\uffda\062\uffda\064\uffda\067\uffda" +
    "\070\uffda\071\uffda\072\uffda\074\uffda\075\uffda\076\uffda\077" +
    "\uffda\100\uffda\101\uffda\001\002\000\032\012\070\013\060" +
    "\014\066\015\062\016\055\017\065\024\056\025\054\026" +
    "\064\027\061\030\067\034\063\001\002\000\020\003\032" +
    "\006\014\020\047\022\027\035\051\036\046\057\052\001" +
    "\002\000\020\003\032\006\014\020\047\022\027\035\051" +
    "\036\046\057\052\001\002\000\102\003\uffdc\005\uffdc\006" +
    "\uffdc\020\uffdc\022\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\053\uffdc\054\uffdc\057\uffdc\060\uffdc\062\uffdc\064\uffdc" +
    "\067\uffdc\070\uffdc\071\uffdc\072\uffdc\074\uffdc\075\uffdc\076" +
    "\uffdc\077\uffdc\100\uffdc\101\uffdc\001\002\000\102\003\uffdb" +
    "\005\uffdb\006\uffdb\020\uffdb\022\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\053\uffdb\054\uffdb\057\uffdb\060\uffdb\062" +
    "\uffdb\064\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\001\002\000" +
    "\074\003\uffd8\005\uffd8\006\uffd8\020\uffd8\022\uffd8\037\uffd8" +
    "\040\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\050" +
    "\uffd8\051\uffd8\053\uffd8\054\uffd8\057\uffd8\062\uffd8\064\uffd8" +
    "\067\uffd8\070\uffd8\071\uffd8\072\uffd8\074\uffd8\075\uffd8\076" +
    "\uffd8\077\uffd8\100\uffd8\101\uffd8\001\002\000\074\003\uffae" +
    "\005\uffae\006\uffae\020\uffae\022\uffae\037\uffae\040\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\050\uffae\051\uffae" +
    "\053\uffae\054\uffae\057\uffae\062\uffae\064\uffae\067\uffae\070" +
    "\uffae\071\uffae\072\uffae\074\uffae\075\uffae\076\uffae\077\uffae" +
    "\100\uffae\101\uffae\001\002\000\022\003\032\006\014\020" +
    "\047\022\027\033\045\035\051\036\046\057\052\001\002" +
    "\000\004\060\141\001\002\000\034\012\070\013\060\014" +
    "\066\015\062\016\055\017\065\024\056\025\054\026\064" +
    "\027\061\030\067\034\063\060\137\001\002\000\004\076" +
    "\140\001\002\000\074\003\uffab\005\uffab\006\uffab\020\uffab" +
    "\022\uffab\037\uffab\040\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\050\uffab\051\uffab\053\uffab\054\uffab\057\uffab" +
    "\062\uffab\064\uffab\067\uffab\070\uffab\071\uffab\072\uffab\074" +
    "\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\001\002" +
    "\000\004\076\142\001\002\000\074\003\uffaa\005\uffaa\006" +
    "\uffaa\020\uffaa\022\uffaa\037\uffaa\040\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\053\uffaa\054" +
    "\uffaa\057\uffaa\062\uffaa\064\uffaa\067\uffaa\070\uffaa\071\uffaa" +
    "\072\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101" +
    "\uffaa\001\002\000\004\057\145\001\002\000\006\011\147" +
    "\021\150\001\002\000\004\010\146\001\002\000\006\011" +
    "\uffde\021\uffde\001\002\000\004\057\171\001\002\000\046" +
    "\003\032\006\014\020\034\022\027\037\033\040\020\043" +
    "\035\050\024\054\025\057\022\062\011\067\013\071\152" +
    "\072\007\075\036\077\016\100\012\101\031\001\002\000" +
    "\050\003\032\006\014\020\034\022\027\037\033\040\020" +
    "\043\035\050\024\054\025\057\022\062\011\067\013\071" +
    "\162\072\007\075\036\076\161\077\016\100\012\101\031" +
    "\001\002\000\020\003\032\006\014\020\047\022\027\035" +
    "\051\036\046\057\052\001\002\000\004\060\157\001\002" +
    "\000\034\012\070\013\060\014\066\015\062\016\055\017" +
    "\065\024\056\025\054\026\064\027\061\030\067\034\063" +
    "\060\155\001\002\000\004\076\156\001\002\000\074\003" +
    "\uffa8\005\uffa8\006\uffa8\020\uffa8\022\uffa8\037\uffa8\040\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\050\uffa8\051" +
    "\uffa8\053\uffa8\054\uffa8\057\uffa8\062\uffa8\064\uffa8\067\uffa8" +
    "\070\uffa8\071\uffa8\072\uffa8\074\uffa8\075\uffa8\076\uffa8\077" +
    "\uffa8\100\uffa8\101\uffa8\001\002\000\004\005\160\001\002" +
    "\000\074\003\uffa7\005\uffa7\006\uffa7\020\uffa7\022\uffa7\037" +
    "\uffa7\040\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\050\uffa7\051\uffa7\053\uffa7\054\uffa7\057\uffa7\062\uffa7\064" +
    "\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\100\uffa7\101\uffa7\001\002\000\074\003" +
    "\uffa9\005\uffa9\006\uffa9\020\uffa9\022\uffa9\037\uffa9\040\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\051" +
    "\uffa9\053\uffa9\054\uffa9\057\uffa9\062\uffa9\064\uffa9\067\uffa9" +
    "\070\uffa9\071\uffa9\072\uffa9\074\uffa9\075\uffa9\076\uffa9\077" +
    "\uffa9\100\uffa9\101\uffa9\001\002\000\020\003\032\006\014" +
    "\020\047\022\027\035\051\036\046\057\052\001\002\000" +
    "\004\060\167\001\002\000\034\012\070\013\060\014\066" +
    "\015\062\016\055\017\065\024\056\025\054\026\064\027" +
    "\061\030\067\034\063\060\165\001\002\000\004\076\166" +
    "\001\002\000\074\003\uffa6\005\uffa6\006\uffa6\020\uffa6\022" +
    "\uffa6\037\uffa6\040\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\050\uffa6\051\uffa6\053\uffa6\054\uffa6\057\uffa6\062" +
    "\uffa6\064\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\074\uffa6" +
    "\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\001\002\000" +
    "\004\076\170\001\002\000\074\003\uffa5\005\uffa5\006\uffa5" +
    "\020\uffa5\022\uffa5\037\uffa5\040\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\053\uffa5\054\uffa5" +
    "\057\uffa5\062\uffa5\064\uffa5\067\uffa5\070\uffa5\071\uffa5\072" +
    "\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5" +
    "\001\002\000\004\010\172\001\002\000\006\011\uffdd\021" +
    "\uffdd\001\002\000\004\047\174\001\002\000\044\003\032" +
    "\006\014\020\034\022\027\037\033\040\020\043\035\050" +
    "\024\054\025\057\022\062\011\067\013\072\007\075\036" +
    "\077\016\100\012\101\031\001\002\000\052\003\032\006" +
    "\014\020\034\022\027\037\033\040\020\043\035\044\201" +
    "\045\200\046\176\050\024\054\025\057\022\062\011\067" +
    "\013\072\007\075\036\077\016\100\012\101\031\001\002" +
    "\000\074\003\uffb4\005\uffb4\006\uffb4\020\uffb4\022\uffb4\037" +
    "\uffb4\040\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\050\uffb4\051\uffb4\053\uffb4\054\uffb4\057\uffb4\062\uffb4\064" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\074\uffb4\075\uffb4" +
    "\076\uffb4\077\uffb4\100\uffb4\101\uffb4\001\002\000\006\044" +
    "\211\045\210\001\002\000\044\003\032\006\014\020\034" +
    "\022\027\037\033\040\020\043\035\050\024\054\025\057" +
    "\022\062\011\067\013\072\007\075\036\077\016\100\012" +
    "\101\031\001\002\000\022\003\032\006\014\020\047\022" +
    "\027\033\045\035\051\036\046\057\052\001\002\000\004" +
    "\047\203\001\002\000\044\003\uffbe\006\uffbe\020\uffbe\022" +
    "\uffbe\037\uffbe\040\uffbe\043\uffbe\050\uffbe\054\uffbe\057\uffbe" +
    "\062\uffbe\067\uffbe\072\uffbe\075\uffbe\077\uffbe\100\uffbe\101" +
    "\uffbe\001\002\000\044\003\032\006\014\020\034\022\027" +
    "\037\033\040\020\043\035\050\024\054\025\057\022\062" +
    "\011\067\013\072\007\075\036\077\016\100\012\101\031" +
    "\001\002\000\050\003\032\006\014\020\034\022\027\037" +
    "\033\040\020\043\035\044\uffbd\045\uffbd\050\024\054\025" +
    "\057\022\062\011\067\013\072\007\075\036\077\016\100" +
    "\012\101\031\001\002\000\046\003\032\006\014\020\034" +
    "\022\027\037\033\040\020\043\035\046\207\050\024\054" +
    "\025\057\022\062\011\067\013\072\007\075\036\077\016" +
    "\100\012\101\031\001\002\000\074\003\uffb3\005\uffb3\006" +
    "\uffb3\020\uffb3\022\uffb3\037\uffb3\040\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\050\uffb3\051\uffb3\053\uffb3\054" +
    "\uffb3\057\uffb3\062\uffb3\064\uffb3\067\uffb3\070\uffb3\071\uffb3" +
    "\072\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\001\002\000\044\003\032\006\014\020\034\022\027" +
    "\037\033\040\020\043\035\050\024\054\025\057\022\062" +
    "\011\067\013\072\007\075\036\077\016\100\012\101\031" +
    "\001\002\000\022\003\032\006\014\020\047\022\027\033" +
    "\045\035\051\036\046\057\052\001\002\000\004\047\uffc0" +
    "\001\002\000\004\047\214\001\002\000\044\003\032\006" +
    "\014\020\034\022\027\037\033\040\020\043\035\050\024" +
    "\054\025\057\022\062\011\067\013\072\007\075\036\077" +
    "\016\100\012\101\031\001\002\000\050\003\032\006\014" +
    "\020\034\022\027\037\033\040\020\043\035\044\uffbf\045" +
    "\uffbf\050\024\054\025\057\022\062\011\067\013\072\007" +
    "\075\036\077\016\100\012\101\031\001\002\000\046\003" +
    "\032\006\014\020\034\022\027\037\033\040\020\043\035" +
    "\046\217\050\024\054\025\057\022\062\011\067\013\072" +
    "\007\075\036\077\016\100\012\101\031\001\002\000\074" +
    "\003\uffb2\005\uffb2\006\uffb2\020\uffb2\022\uffb2\037\uffb2\040" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\050\uffb2" +
    "\051\uffb2\053\uffb2\054\uffb2\057\uffb2\062\uffb2\064\uffb2\067" +
    "\uffb2\070\uffb2\071\uffb2\072\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\077\uffb2\100\uffb2\101\uffb2\001\002\000\020\012\070\013" +
    "\060\014\066\015\062\016\055\017\065\021\116\001\002" +
    "\000\004\020\222\001\002\000\024\003\032\006\014\007" +
    "\223\020\047\021\225\022\027\035\227\036\226\057\052" +
    "\001\002\000\006\011\uffce\021\uffce\001\002\000\006\011" +
    "\uffd0\021\uffd0\001\002\000\004\060\242\001\002\000\012" +
    "\011\uffd4\021\uffd4\030\120\034\121\001\002\000\012\011" +
    "\uffd2\021\uffd2\030\107\034\106\001\002\000\006\011\232" +
    "\021\233\001\002\000\036\011\uffd6\012\070\013\060\014" +
    "\066\015\062\016\055\017\065\021\uffd6\024\056\025\054" +
    "\026\064\027\061\030\067\034\063\001\002\000\022\003" +
    "\032\006\014\007\235\020\047\022\027\035\240\036\237" +
    "\057\052\001\002\000\004\060\234\001\002\000\074\003" +
    "\uff98\005\uff98\006\uff98\020\uff98\022\uff98\037\uff98\040\uff98" +
    "\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\050\uff98\051" +
    "\uff98\053\uff98\054\uff98\057\uff98\062\uff98\064\uff98\067\uff98" +
    "\070\uff98\071\uff98\072\uff98\074\uff98\075\uff98\076\uff98\077" +
    "\uff98\100\uff98\101\uff98\001\002\000\006\011\uffcd\021\uffcd" +
    "\001\002\000\006\011\uffcf\021\uffcf\001\002\000\012\011" +
    "\uffd3\021\uffd3\030\120\034\121\001\002\000\012\011\uffd1" +
    "\021\uffd1\030\107\034\106\001\002\000\036\011\uffd5\012" +
    "\070\013\060\014\066\015\062\016\055\017\065\021\uffd5" +
    "\024\056\025\054\026\064\027\061\030\067\034\063\001" +
    "\002\000\074\003\uff99\005\uff99\006\uff99\020\uff99\022\uff99" +
    "\037\uff99\040\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046" +
    "\uff99\050\uff99\051\uff99\053\uff99\054\uff99\057\uff99\062\uff99" +
    "\064\uff99\067\uff99\070\uff99\071\uff99\072\uff99\074\uff99\075" +
    "\uff99\076\uff99\077\uff99\100\uff99\101\uff99\001\002\000\016" +
    "\003\032\006\014\020\034\022\027\036\246\057\052\001" +
    "\002\000\004\057\245\001\002\000\010\011\uffdf\055\uffdf" +
    "\061\uffdf\001\002\000\004\060\251\001\002\000\020\012" +
    "\070\013\060\014\066\015\062\016\055\017\065\060\250" +
    "\001\002\000\074\003\uffe8\005\uffe8\006\uffe8\020\uffe8\022" +
    "\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\050\uffe8\051\uffe8\053\uffe8\054\uffe8\057\uffe8\062" +
    "\uffe8\064\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\074\uffe8" +
    "\075\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\001\002\000" +
    "\074\003\uffe7\005\uffe7\006\uffe7\020\uffe7\022\uffe7\037\uffe7" +
    "\040\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\050" +
    "\uffe7\051\uffe7\053\uffe7\054\uffe7\057\uffe7\062\uffe7\064\uffe7" +
    "\067\uffe7\070\uffe7\071\uffe7\072\uffe7\074\uffe7\075\uffe7\076" +
    "\uffe7\077\uffe7\100\uffe7\101\uffe7\001\002\000\020\012\070" +
    "\013\060\014\066\015\062\016\055\017\065\023\253\001" +
    "\002\000\152\003\ufff7\005\ufff7\006\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\034\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\057\ufff7\060" +
    "\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\072\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100" +
    "\ufff7\101\ufff7\001\002\000\006\011\244\055\256\001\002" +
    "\000\010\011\uffe0\055\uffe0\061\uffe0\001\002\000\004\010" +
    "\257\001\002\000\004\056\260\001\002\000\022\003\032" +
    "\006\014\007\261\020\047\022\027\035\264\036\263\057" +
    "\052\001\002\000\004\060\272\001\002\000\004\060\271" +
    "\001\002\000\010\030\120\034\121\060\270\001\002\000" +
    "\010\030\107\034\106\060\267\001\002\000\034\012\070" +
    "\013\060\014\066\015\062\016\055\017\065\024\056\025" +
    "\054\026\064\027\061\030\067\034\063\060\266\001\002" +
    "\000\074\003\uffe5\005\uffe5\006\uffe5\020\uffe5\022\uffe5\037" +
    "\uffe5\040\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\050\uffe5\051\uffe5\053\uffe5\054\uffe5\057\uffe5\062\uffe5\064" +
    "\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\074\uffe5\075\uffe5" +
    "\076\uffe5\077\uffe5\100\uffe5\101\uffe5\001\002\000\074\003" +
    "\uffe3\005\uffe3\006\uffe3\020\uffe3\022\uffe3\037\uffe3\040\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\050\uffe3\051" +
    "\uffe3\053\uffe3\054\uffe3\057\uffe3\062\uffe3\064\uffe3\067\uffe3" +
    "\070\uffe3\071\uffe3\072\uffe3\074\uffe3\075\uffe3\076\uffe3\077" +
    "\uffe3\100\uffe3\101\uffe3\001\002\000\074\003\uffe4\005\uffe4" +
    "\006\uffe4\020\uffe4\022\uffe4\037\uffe4\040\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4\051\uffe4\053\uffe4" +
    "\054\uffe4\057\uffe4\062\uffe4\064\uffe4\067\uffe4\070\uffe4\071" +
    "\uffe4\072\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4" +
    "\101\uffe4\001\002\000\074\003\uffe1\005\uffe1\006\uffe1\020" +
    "\uffe1\022\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\050\uffe1\051\uffe1\053\uffe1\054\uffe1\057" +
    "\uffe1\062\uffe1\064\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1" +
    "\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\001" +
    "\002\000\074\003\uffe2\005\uffe2\006\uffe2\020\uffe2\022\uffe2" +
    "\037\uffe2\040\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\050\uffe2\051\uffe2\053\uffe2\054\uffe2\057\uffe2\062\uffe2" +
    "\064\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\074\uffe2\075" +
    "\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\001\002\000\020" +
    "\012\070\013\060\014\066\015\062\016\055\017\065\041" +
    "\uffa0\001\002\000\004\041\275\001\002\000\004\051\277" +
    "\001\002\000\006\045\305\051\306\001\002\000\014\003" +
    "\032\006\014\020\034\022\027\057\052\001\002\000\020" +
    "\012\070\013\060\014\066\015\062\016\055\017\065\052" +
    "\301\001\002\000\004\047\302\001\002\000\044\003\uffba" +
    "\006\uffba\020\uffba\022\uffba\037\uffba\040\uffba\043\uffba\050" +
    "\uffba\054\uffba\057\uffba\062\uffba\067\uffba\072\uffba\075\uffba" +
    "\077\uffba\100\uffba\101\uffba\001\002\000\044\003\032\006" +
    "\014\020\034\022\027\037\033\040\020\043\035\050\024" +
    "\054\025\057\022\062\011\067\013\072\007\075\036\077" +
    "\016\100\012\101\031\001\002\000\050\003\032\006\014" +
    "\020\034\022\027\037\033\040\020\043\035\045\uffb9\050" +
    "\024\051\uffb9\054\025\057\022\062\011\067\013\072\007" +
    "\075\036\077\016\100\012\101\031\001\002\000\004\047" +
    "\314\001\002\000\014\003\032\006\014\020\034\022\027" +
    "\057\052\001\002\000\020\012\070\013\060\014\066\015" +
    "\062\016\055\017\065\052\310\001\002\000\004\047\311" +
    "\001\002\000\044\003\uffbc\006\uffbc\020\uffbc\022\uffbc\037" +
    "\uffbc\040\uffbc\043\uffbc\050\uffbc\054\uffbc\057\uffbc\062\uffbc" +
    "\067\uffbc\072\uffbc\075\uffbc\077\uffbc\100\uffbc\101\uffbc\001" +
    "\002\000\044\003\032\006\014\020\034\022\027\037\033" +
    "\040\020\043\035\050\024\054\025\057\022\062\011\067" +
    "\013\072\007\075\036\077\016\100\012\101\031\001\002" +
    "\000\050\003\032\006\014\020\034\022\027\037\033\040" +
    "\020\043\035\045\uffbb\050\024\051\uffbb\054\025\057\022" +
    "\062\011\067\013\072\007\075\036\077\016\100\012\101" +
    "\031\001\002\000\044\003\uff9f\006\uff9f\020\uff9f\022\uff9f" +
    "\037\uff9f\040\uff9f\043\uff9f\050\uff9f\054\uff9f\057\uff9f\062" +
    "\uff9f\067\uff9f\072\uff9f\075\uff9f\077\uff9f\100\uff9f\101\uff9f" +
    "\001\002\000\044\003\032\006\014\020\034\022\027\037" +
    "\033\040\020\043\035\050\024\054\025\057\022\062\011" +
    "\067\013\072\007\075\036\077\016\100\012\101\031\001" +
    "\002\000\046\003\032\006\014\020\034\022\027\037\033" +
    "\040\020\043\035\050\024\053\317\054\025\057\022\062" +
    "\011\067\013\072\007\075\036\077\016\100\012\101\031" +
    "\001\002\000\074\003\uff9e\005\uff9e\006\uff9e\020\uff9e\022" +
    "\uff9e\037\uff9e\040\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\050\uff9e\051\uff9e\053\uff9e\054\uff9e\057\uff9e\062" +
    "\uff9e\064\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\074\uff9e" +
    "\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e\001\002\000" +
    "\004\002\000\001\002\000\004\041\322\001\002\000\046" +
    "\003\uffb6\006\uffb6\020\uffb6\022\uffb6\037\uffb6\040\uffb6\042" +
    "\uffb8\043\uffb6\050\uffb6\054\uffb6\057\uffb6\062\uffb6\067\uffb6" +
    "\072\uffb6\075\uffb6\077\uffb6\100\uffb6\101\uffb6\001\002\000" +
    "\044\003\032\006\014\020\034\022\027\037\033\040\020" +
    "\043\035\050\024\054\025\057\022\062\011\067\013\072" +
    "\007\075\036\077\016\100\012\101\031\001\002\000\004" +
    "\042\325\001\002\000\074\003\uffb7\005\uffb7\006\uffb7\020" +
    "\uffb7\022\uffb7\037\uffb7\040\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\050\uffb7\051\uffb7\053\uffb7\054\uffb7\057" +
    "\uffb7\062\uffb7\064\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\001" +
    "\002\000\046\003\032\006\014\020\034\022\027\037\033" +
    "\040\020\042\327\043\035\050\024\054\025\057\022\062" +
    "\011\067\013\072\007\075\036\077\016\100\012\101\031" +
    "\001\002\000\074\003\uffb5\005\uffb5\006\uffb5\020\uffb5\022" +
    "\uffb5\037\uffb5\040\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\050\uffb5\051\uffb5\053\uffb5\054\uffb5\057\uffb5\062" +
    "\uffb5\064\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\001\002\000" +
    "\004\060\346\001\002\000\010\030\120\034\121\060\345" +
    "\001\002\000\020\003\032\006\014\020\047\022\027\035" +
    "\340\036\337\057\052\001\002\000\010\030\107\034\106" +
    "\060\336\001\002\000\034\012\070\013\060\014\066\015" +
    "\062\016\055\017\065\024\056\025\054\026\064\027\061" +
    "\030\067\034\063\060\335\001\002\000\074\003\uffca\005" +
    "\uffca\006\uffca\020\uffca\022\uffca\037\uffca\040\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\050\uffca\051\uffca\053" +
    "\uffca\054\uffca\057\uffca\062\uffca\064\uffca\067\uffca\070\uffca" +
    "\071\uffca\072\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100" +
    "\uffca\101\uffca\001\002\000\074\003\uffcb\005\uffcb\006\uffcb" +
    "\020\uffcb\022\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb" +
    "\057\uffcb\062\uffcb\064\uffcb\067\uffcb\070\uffcb\071\uffcb\072" +
    "\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb" +
    "\001\002\000\010\021\343\030\120\034\121\001\002\000" +
    "\010\021\341\030\107\034\106\001\002\000\004\060\342" +
    "\001\002\000\074\003\uffc7\005\uffc7\006\uffc7\020\uffc7\022" +
    "\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\050\uffc7\051\uffc7\053\uffc7\054\uffc7\057\uffc7\062" +
    "\uffc7\064\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\001\002\000" +
    "\004\060\344\001\002\000\074\003\uffc8\005\uffc8\006\uffc8" +
    "\020\uffc8\022\uffc8\037\uffc8\040\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8\053\uffc8\054\uffc8" +
    "\057\uffc8\062\uffc8\064\uffc8\067\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8" +
    "\001\002\000\074\003\uffcc\005\uffcc\006\uffcc\020\uffcc\022" +
    "\uffcc\037\uffcc\040\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\050\uffcc\051\uffcc\053\uffcc\054\uffcc\057\uffcc\062" +
    "\uffcc\064\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\074\uffcc" +
    "\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\001\002\000" +
    "\074\003\uffc9\005\uffc9\006\uffc9\020\uffc9\022\uffc9\037\uffc9" +
    "\040\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\050" +
    "\uffc9\051\uffc9\053\uffc9\054\uffc9\057\uffc9\062\uffc9\064\uffc9" +
    "\067\uffc9\070\uffc9\071\uffc9\072\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\100\uffc9\101\uffc9\001\002\000\004\070\354" +
    "\001\002\000\044\003\032\006\014\020\034\022\027\037" +
    "\033\040\020\043\035\050\024\054\025\057\022\062\011" +
    "\067\013\072\007\075\036\077\016\100\012\101\031\001" +
    "\002\000\046\003\032\006\014\020\034\022\027\037\033" +
    "\040\020\043\035\050\024\054\025\057\022\062\011\067" +
    "\013\070\352\072\007\075\036\077\016\100\012\101\031" +
    "\001\002\000\022\003\032\006\014\020\047\022\027\033" +
    "\045\035\051\036\046\057\052\001\002\000\074\003\uffa3" +
    "\005\uffa3\006\uffa3\020\uffa3\022\uffa3\037\uffa3\040\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3" +
    "\053\uffa3\054\uffa3\057\uffa3\062\uffa3\064\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3" +
    "\100\uffa3\101\uffa3\001\002\000\022\003\032\006\014\020" +
    "\047\022\027\033\045\035\051\036\046\057\052\001\002" +
    "\000\074\003\uffa1\005\uffa1\006\uffa1\020\uffa1\022\uffa1\037" +
    "\uffa1\040\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\050\uffa1\051\uffa1\053\uffa1\054\uffa1\057\uffa1\062\uffa1\064" +
    "\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\074\uffa1\075\uffa1" +
    "\076\uffa1\077\uffa1\100\uffa1\101\uffa1\001\002\000\004\060" +
    "\374\001\002\000\010\030\120\034\121\060\373\001\002" +
    "\000\020\003\032\006\014\020\047\022\027\035\366\036" +
    "\365\057\052\001\002\000\010\030\107\034\106\060\364" +
    "\001\002\000\034\012\070\013\060\014\066\015\062\016" +
    "\055\017\065\024\056\025\054\026\064\027\061\030\067" +
    "\034\063\060\363\001\002\000\074\003\uffc4\005\uffc4\006" +
    "\uffc4\020\uffc4\022\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\050\uffc4\051\uffc4\053\uffc4\054" +
    "\uffc4\057\uffc4\062\uffc4\064\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101" +
    "\uffc4\001\002\000\074\003\uffc5\005\uffc5\006\uffc5\020\uffc5" +
    "\022\uffc5\037\uffc5\040\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\050\uffc5\051\uffc5\053\uffc5\054\uffc5\057\uffc5" +
    "\062\uffc5\064\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\001\002" +
    "\000\010\021\371\030\120\034\121\001\002\000\010\021" +
    "\367\030\107\034\106\001\002\000\004\060\370\001\002" +
    "\000\074\003\uffc1\005\uffc1\006\uffc1\020\uffc1\022\uffc1\037" +
    "\uffc1\040\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\050\uffc1\051\uffc1\053\uffc1\054\uffc1\057\uffc1\062\uffc1\064" +
    "\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\074\uffc1\075\uffc1" +
    "\076\uffc1\077\uffc1\100\uffc1\101\uffc1\001\002\000\004\060" +
    "\372\001\002\000\074\003\uffc2\005\uffc2\006\uffc2\020\uffc2" +
    "\022\uffc2\037\uffc2\040\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\050\uffc2\051\uffc2\053\uffc2\054\uffc2\057\uffc2" +
    "\062\uffc2\064\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\074" +
    "\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\001\002" +
    "\000\074\003\uffc6\005\uffc6\006\uffc6\020\uffc6\022\uffc6\037" +
    "\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\050\uffc6\051\uffc6\053\uffc6\054\uffc6\057\uffc6\062\uffc6\064" +
    "\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\074\uffc6\075\uffc6" +
    "\076\uffc6\077\uffc6\100\uffc6\101\uffc6\001\002\000\074\003" +
    "\uffc3\005\uffc3\006\uffc3\020\uffc3\022\uffc3\037\uffc3\040\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\050\uffc3\051" +
    "\uffc3\053\uffc3\054\uffc3\057\uffc3\062\uffc3\064\uffc3\067\uffc3" +
    "\070\uffc3\071\uffc3\072\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\001\002\000\004\063\u0101\001\002" +
    "\000\006\011\244\061\377\001\002\000\014\003\032\006" +
    "\014\020\034\022\027\057\052\001\002\000\020\012\070" +
    "\013\060\014\066\015\062\016\055\017\065\063\uffe6\001" +
    "\002\000\014\003\032\006\014\020\034\022\027\057\052" +
    "\001\002\000\022\012\070\013\060\014\066\015\062\016" +
    "\055\017\065\041\u0104\065\u0103\001\002\000\004\066\u0108" +
    "\001\002\000\046\003\032\006\014\020\034\022\027\037" +
    "\033\040\020\043\035\050\024\054\025\057\022\062\011" +
    "\064\u0105\067\013\072\007\075\036\077\016\100\012\101" +
    "\031\001\002\000\074\003\uffb0\005\uffb0\006\uffb0\020\uffb0" +
    "\022\uffb0\037\uffb0\040\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\050\uffb0\051\uffb0\053\uffb0\054\uffb0\057\uffb0" +
    "\062\uffb0\064\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\074" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\001\002" +
    "\000\046\003\032\006\014\020\034\022\027\037\033\040" +
    "\020\043\035\050\024\054\025\057\022\062\011\064\u0107" +
    "\067\013\072\007\075\036\077\016\100\012\101\031\001" +
    "\002\000\074\003\uffb1\005\uffb1\006\uffb1\020\uffb1\022\uffb1" +
    "\037\uffb1\040\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1\057\uffb1\062\uffb1" +
    "\064\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\074\uffb1\075" +
    "\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\001\002\000\014" +
    "\003\032\006\014\020\034\022\027\057\052\001\002\000" +
    "\020\012\070\013\060\014\066\015\062\016\055\017\065" +
    "\041\u010a\001\002\000\044\003\032\006\014\020\034\022" +
    "\027\037\033\040\020\043\035\050\024\054\025\057\022" +
    "\062\011\067\013\072\007\075\036\077\016\100\012\101" +
    "\031\001\002\000\046\003\032\006\014\020\034\022\027" +
    "\037\033\040\020\043\035\050\024\054\025\057\022\062" +
    "\011\064\u010c\067\013\072\007\075\036\077\016\100\012" +
    "\101\031\001\002\000\074\003\uffaf\005\uffaf\006\uffaf\020" +
    "\uffaf\022\uffaf\037\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\050\uffaf\051\uffaf\053\uffaf\054\uffaf\057" +
    "\uffaf\062\uffaf\064\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf" +
    "\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\001" +
    "\002\000\046\003\uff9d\006\uff9d\020\uff9d\022\uff9d\037\uff9d" +
    "\040\uff9d\043\uff9d\050\uff9d\054\uff9d\057\uff9d\062\uff9d\067" +
    "\uff9d\072\uff9d\073\u010f\075\uff9d\077\uff9d\100\uff9d\101\uff9d" +
    "\001\002\000\044\003\032\006\014\020\034\022\027\037" +
    "\033\040\020\043\035\050\024\054\025\057\022\062\011" +
    "\067\013\072\007\075\036\077\016\100\012\101\031\001" +
    "\002\000\004\020\u0110\001\002\000\004\057\145\001\002" +
    "\000\006\011\147\021\u0112\001\002\000\044\003\uff9b\006" +
    "\uff9b\020\uff9b\022\uff9b\037\uff9b\040\uff9b\043\uff9b\050\uff9b" +
    "\054\uff9b\057\uff9b\062\uff9b\067\uff9b\072\uff9b\075\uff9b\077" +
    "\uff9b\100\uff9b\101\uff9b\001\002\000\044\003\032\006\014" +
    "\020\034\022\027\037\033\040\020\043\035\050\024\054" +
    "\025\057\022\062\011\067\013\072\007\075\036\077\016" +
    "\100\012\101\031\001\002\000\046\003\032\006\014\020" +
    "\034\022\027\037\033\040\020\043\035\050\024\054\025" +
    "\057\022\062\011\067\013\072\007\074\u0115\075\036\077" +
    "\016\100\012\101\031\001\002\000\074\003\uff9a\005\uff9a" +
    "\006\uff9a\020\uff9a\022\uff9a\037\uff9a\040\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\050\uff9a\051\uff9a\053\uff9a" +
    "\054\uff9a\057\uff9a\062\uff9a\064\uff9a\067\uff9a\070\uff9a\071" +
    "\uff9a\072\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a" +
    "\101\uff9a\001\002\000\046\003\032\006\014\020\034\022" +
    "\027\037\033\040\020\043\035\050\024\054\025\057\022" +
    "\062\011\067\013\072\007\074\u0117\075\036\077\016\100" +
    "\012\101\031\001\002\000\074\003\uff9c\005\uff9c\006\uff9c" +
    "\020\uff9c\022\uff9c\037\uff9c\040\uff9c\042\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\053\uff9c\054\uff9c" +
    "\057\uff9c\062\uff9c\064\uff9c\067\uff9c\070\uff9c\071\uff9c\072" +
    "\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\004\004\003\001\001\000\002\001\001\000" +
    "\022\003\027\005\025\007\014\010\005\013\022\014\016" +
    "\015\007\021\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\375\006\374\001\001" +
    "\000\006\010\361\012\355\001\001\000\006\030\347\031" +
    "\346\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\333\012\327\001\001\000\016\003\027\005\025\007" +
    "\014\010\005\015\131\021\020\001\001\000\010\010\124" +
    "\011\320\012\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\272\001\001\000\004" +
    "\003\253\001\001\000\002\001\001\000\004\010\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\217\001\001\000\010\010" +
    "\124\011\172\012\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\027\005\025\007\014\010\005\014" +
    "\041\015\007\021\020\001\001\000\002\001\001\000\016" +
    "\003\027\005\025\007\014\010\005\015\131\021\020\001" +
    "\001\000\010\010\052\011\047\012\043\001\001\000\002" +
    "\001\001\000\006\010\124\012\123\001\001\000\002\001" +
    "\001\000\006\010\114\012\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\104\001\001\000\004\010\103\001\001\000\004" +
    "\010\102\001\001\000\002\001\001\000\004\010\100\001" +
    "\001\000\004\010\077\001\001\000\004\010\076\001\001" +
    "\000\004\010\075\001\001\000\004\010\074\001\001\000" +
    "\004\010\073\001\001\000\004\010\072\001\001\000\004" +
    "\010\071\001\001\000\004\010\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\124" +
    "\012\130\001\001\000\006\010\124\012\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\135\011\134\012\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\027\005\025\007" +
    "\014\010\005\014\150\015\007\021\020\001\001\000\016" +
    "\003\027\005\025\007\014\010\005\015\131\021\020\001" +
    "\001\000\006\010\153\012\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\163\012\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\027\005\025\007\014\010\005" +
    "\014\174\015\007\021\020\001\001\000\020\002\176\003" +
    "\027\005\025\007\014\010\005\015\131\021\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\027\005" +
    "\025\007\014\010\005\014\205\015\007\021\020\001\001" +
    "\000\010\010\124\011\201\012\043\001\001\000\002\001" +
    "\001\000\004\023\203\001\001\000\020\003\027\005\025" +
    "\007\014\010\005\014\204\015\007\021\020\001\001\000" +
    "\016\003\027\005\025\007\014\010\005\015\131\021\020" +
    "\001\001\000\016\003\027\005\025\007\014\010\005\015" +
    "\131\021\020\001\001\000\002\001\001\000\020\003\027" +
    "\005\025\007\014\010\005\014\215\015\007\021\020\001" +
    "\001\000\010\010\124\011\211\012\043\001\001\000\004" +
    "\022\212\001\001\000\002\001\001\000\020\003\027\005" +
    "\025\007\014\010\005\014\214\015\007\021\020\001\001" +
    "\000\016\003\027\005\025\007\014\010\005\015\131\021" +
    "\020\001\001\000\016\003\027\005\025\007\014\010\005" +
    "\015\131\021\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\230\012\223\020\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\240\012\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\264\012\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\273\001\001\000\002\001\001" +
    "\000\004\016\275\001\001\000\002\001\001\000\004\010" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\302\001\001\000\020\003\027\005\025\007\014\010" +
    "\005\014\303\015\007\021\020\001\001\000\016\003\027" +
    "\005\025\007\014\010\005\015\131\021\020\001\001\000" +
    "\002\001\001\000\004\010\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\311\001\001\000\020\003" +
    "\027\005\025\007\014\010\005\014\312\015\007\021\020" +
    "\001\001\000\016\003\027\005\025\007\014\010\005\015" +
    "\131\021\020\001\001\000\004\033\314\001\001\000\020" +
    "\003\027\005\025\007\014\010\005\014\315\015\007\021" +
    "\020\001\001\000\016\003\027\005\025\007\014\010\005" +
    "\015\131\021\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\323\027\322\001\001" +
    "\000\020\003\027\005\025\007\014\010\005\014\325\015" +
    "\007\021\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\027\005\025\007\014\010\005\015\131\021" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\114\012\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\027\005\025\007\014\010\005\014\350\015\007\021\020" +
    "\001\001\000\016\003\027\005\025\007\014\010\005\015" +
    "\131\021\020\001\001\000\010\010\124\011\352\012\043" +
    "\001\001\000\002\001\001\000\010\010\124\011\354\012" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\114\012\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\377\001\001\000\002\001\001\000\004" +
    "\010\u0101\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\027\005\025\007\014\010\005\014\u0105\015\007" +
    "\021\020\001\001\000\002\001\001\000\016\003\027\005" +
    "\025\007\014\010\005\015\131\021\020\001\001\000\002" +
    "\001\001\000\004\010\u0108\001\001\000\002\001\001\000" +
    "\020\003\027\005\025\007\014\010\005\014\u010a\015\007" +
    "\021\020\001\001\000\016\003\027\005\025\007\014\010" +
    "\005\015\131\021\020\001\001\000\002\001\001\000\004" +
    "\034\u010d\001\001\000\020\003\027\005\025\007\014\010" +
    "\005\014\u0115\015\007\021\020\001\001\000\002\001\001" +
    "\000\004\017\u0110\001\001\000\002\001\001\000\004\035" +
    "\u0112\001\001\000\020\003\027\005\025\007\014\010\005" +
    "\014\u0113\015\007\021\020\001\001\000\016\003\027\005" +
    "\025\007\014\010\005\015\131\021\020\001\001\000\002" +
    "\001\001\000\016\003\027\005\025\007\014\010\005\015" +
    "\131\021\020\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // varible que guarda los tokens correctos
    public LinkedList<TError> ListaErresSintacticos = new LinkedList<TError>();
    public LinkedList<Object> AST;
    public Declaraciones listaTokens = new Declaraciones();
    public void syntax_error(Symbol s){
                TError error = new TError(String.valueOf(s.value),s.right,s.left,"Sintactico","Token inesperado");
                ListaErresSintacticos.add(error);
        }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
                TError error = new TError(String.valueOf(s.value),s.right,s.left,"Sintactico","Token inesperado");
                ListaErresSintacticos.add(error);
    }
    public LinkedList<Object> getAST(){
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {


String NumeroIngresado="";

  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= inicio INI fin 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INI ::= INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INI",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENUMERICA ::= ENUMERICA mas ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"+"+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ENUMERICA",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENUMERICA ::= ENUMERICA menos ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"-"+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ENUMERICA",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ENUMERICA ::= ENUMERICA por ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"*"+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ENUMERICA",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ENUMERICA ::= ENUMERICA division ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"/"+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ENUMERICA",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ENUMERICA ::= ENUMERICA potencia ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"potencia"+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ENUMERICA",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ENUMERICA ::= ENUMERICA mod ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"%"+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ENUMERICA",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ENUMERICA ::= parA ENUMERICA parC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT="("+String.valueOf(a)+")";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ENUMERICA",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ENUMERICA ::= corA ENUMERICA corC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT="["+String.valueOf(a)+"]";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ENUMERICA",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ENUMERICA ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ENUMERICA",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ENUMERICA ::= variables 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ENUMERICA",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ENUMERICA ::= error 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ENUMERICA",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESIONRELACIONAL ::= ENUMERICA mayorQue ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+">"+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESIONRELACIONAL ::= ENUMERICA menorQue ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"<"+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESIONRELACIONAL ::= ENUMERICA mayorOIgual ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+">="+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESIONRELACIONAL ::= ENUMERICA menorOIgual ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"<="+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESIONRELACIONAL ::= ENUMERICA igualLogico ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"=="+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESIONRELACIONAL ::= cadena igualLogico cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"=="+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESIONRELACIONAL ::= caracter igualLogico caracter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"=="+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESIONRELACIONAL ::= ENUMERICA diferente ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"!="+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESIONRELACIONAL ::= caracter diferente caracter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"!="+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESIONRELACIONAL ::= cadena diferente cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"!="+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESIONRELACIONAL ::= parA EXPRESIONRELACIONAL parC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT="("+String.valueOf(a)+")";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACION ::= VARNAME asignarValor ENUMERICA ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode(String.valueOf(a),String.valueOf(b),"","","ASIGNACION");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= VARNAME asignarValor cadena ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode(String.valueOf(a),String.valueOf(b),"","","ASIGNACION");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACIONOTRAS ::= VARNAME asignarValor ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"ASIGNAR"+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONOTRAS",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= ingresar VARNAME como tipoDato con_valor ENUMERICA ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode(String.valueOf(a),String.valueOf(c),"",String.valueOf(b),"DECLARACION");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= ingresar VARNAME como tipoDato con_valor cadena ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode(String.valueOf(a),String.valueOf(c),"",String.valueOf(b),"DECLARACION");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= ingresar VARNAME como tipoDato con_valor caracter ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode(String.valueOf(a),String.valueOf(c),"","caracter","DECLARACION");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= ingresar VARNAME como tipoDato con_valor booleanR ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode(String.valueOf(a),String.valueOf(c),"",String.valueOf(b),"DECLARACION");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= ingresar VARNAME como tipoDato con_valor EXPRESIONRELACIONAL ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode(String.valueOf(a),String.valueOf(c),"",String.valueOf(b),"DECLARACION");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VARNAME ::= variables 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VARNAME",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARNAME ::= VARNAME coma variables 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT = String.valueOf(a)+String.valueOf(b)+String.valueOf(c);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VARNAME",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARNAMEMF ::= variables tipoDato 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+" "+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VARNAMEMF",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARNAMEMF ::= VARNAMEMF coma variables tipoDato 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+", "+String.valueOf(b)+" "+String.valueOf(c);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VARNAMEMF",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESIONLOGICA ::= EXPRESIONRELACIONAL or EXPRESIONRELACIONAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"OR"+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONLOGICA",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESIONLOGICA ::= EXPRESIONRELACIONAL and EXPRESIONRELACIONAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a)+"AND"+String.valueOf(b);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONLOGICA",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESIONLOGICA ::= not EXPRESIONRELACIONAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT="NOT "+String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONLOGICA",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESIONLOGICA ::= EXPRESIONRELACIONAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONLOGICA",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCIONES ::= INSTRUCCION 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EJECUCIONV ::= ENUMERICA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCIONV",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EJECUCIONV ::= EJECUCIONV coma ENUMERICA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(b)+", "+String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCIONV",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EJECUCIONV ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCIONV",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EJECUCIONV ::= EJECUCIONV coma cadena 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(b)+", "+String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCIONV",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EJECUCIONV ::= caracter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCIONV",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EJECUCIONV ::= EJECUCIONV coma caracter 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(b)+", "+String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCIONV",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EJECUCIONV ::= EXPRESIONRELACIONAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCIONV",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EJECUCIONV ::= EJECUCIONV coma EXPRESIONRELACIONAL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(b)+", "+String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCIONV",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EJECUCIONV ::= booleanR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCIONV",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EJECUCIONV ::= EJECUCIONV coma booleanR 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT=String.valueOf(b)+", "+String.valueOf(a);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCIONV",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IMPRIMIRV ::= imprimir cadena ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IMPRIMIRV ::= imprimir caracter ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IMPRIMIRV ::= imprimir ENUMERICA ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IMPRIMIRV ::= imprimir EXPRESIONRELACIONAL ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IMPRIMIRV ::= imprimir parA cadena parC ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		listaTokens.addNode("","("+String.valueOf(a)+")","","","IMPRIMIR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IMPRIMIRV ::= imprimir parA caracter parC ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		listaTokens.addNode("","("+String.valueOf(a)+")","","","IMPRIMIR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IMPRIMIRV ::= imprimir_nl cadena ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIRLN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IMPRIMIRV ::= imprimir_nl caracter ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIRLN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IMPRIMIRV ::= imprimir_nl ENUMERICA ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIRLN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IMPRIMIRV ::= imprimir_nl EXPRESIONRELACIONAL ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIRLN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IMPRIMIRV ::= imprimir_nl parA cadena parC ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		listaTokens.addNode("","("+String.valueOf(a)+")","","","IMPRIMIRLN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IMPRIMIRV ::= imprimir_nl parA caracter parC ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		listaTokens.addNode("","("+String.valueOf(a)+")","","","IMPRIMIRLN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRV",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$0 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
listaTokens.addNode("",String.valueOf(a),"","","ELSEIF");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OSI ::= OSI o_si EXPRESIONLOGICA NT$0 entonces INSTRUCCIONES 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		listaTokens.addNode("","","","","F_ELSEIF");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OSI",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$1 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
listaTokens.addNode("",String.valueOf(a),"","","ELSEIF");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OSI ::= o_si EXPRESIONLOGICA entonces NT$1 INSTRUCCIONES 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OSI",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$2 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
listaTokens.addNode("",String.valueOf(a),"","","CASE");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SEGUNOP ::= SEGUNOP inteA ENUMERICA inteC entonces NT$2 INSTRUCCIONES 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;
		listaTokens.addNode("","","","","F_CASE");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SEGUNOP",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$3 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
listaTokens.addNode("",String.valueOf(a),"","","CASE");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SEGUNOP ::= inteA ENUMERICA inteC entonces NT$3 INSTRUCCIONES 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;
		listaTokens.addNode("","","","","F_CASE");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SEGUNOP",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$4 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
listaTokens.addNode("",String.valueOf(a),"","","MIENTRAS");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTRUCCION ::= mientras EXPRESIONLOGICA hacer NT$4 fmientras 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		listaTokens.addNode("","","","","F_MIENTRAS");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$5 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
listaTokens.addNode("","("+String.valueOf(a)+")","","","MIENTRAS");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTRUCCION ::= mientras EXPRESIONLOGICA hacer NT$5 INSTRUCCIONES fmientras 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;
		listaTokens.addNode("","","","","F_MIENTRAS");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTRUCCION ::= si EXPRESIONLOGICA entonces INSTRUCCIONES fi_si 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		System.out.println("hola");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUCCION ::= si EXPRESIONLOGICA entonces INSTRUCCIONES de_lo_contrario INSTRUCCIONES fi_si 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTRUCCION ::= si EXPRESIONLOGICA entonces INSTRUCCIONES OSI de_lo_contrario INSTRUCCIONES fi_si 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTRUCCION ::= para ASIGNACIONOTRAS hasta ENUMERICA hacer INSTRUCCIONES fpara 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTRUCCION ::= para ASIGNACIONOTRAS hasta ENUMERICA hacer fpara 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTRUCCION ::= para ASIGNACIONOTRAS hasta ENUMERICA con incremental ENUMERICA hacer INSTRUCCIONES fpara 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTRUCCION ::= funcion variables tipoDato INSTRUCCIONES fin_funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCCION ::= funcion variables tipoDato retornar ENUMERICA ptcoma fin_funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCCION ::= funcion variables tipoDato retornar EXPRESIONLOGICA ptcoma fin_funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCCION ::= funcion variables tipoDato INSTRUCCIONES retornar ENUMERICA ptcoma fin_funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCCION ::= funcion variables tipoDato INSTRUCCIONES retornar EXPRESIONLOGICA ptcoma fin_funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCCION ::= funcion variables tipoDato con_parametros parA VARNAMEMF parC INSTRUCCIONES fin_funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCCION ::= funcion variables tipoDato con_parametros parA VARNAMEMF parC retornar ENUMERICA ptcoma fin_funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCCION ::= funcion variables tipoDato con_parametros parA VARNAMEMF parC retornar EXPRESIONRELACIONAL ptcoma fin 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCCION ::= funcion variables tipoDato con_parametros parA VARNAMEMF parC INSTRUCCIONES retornar ENUMERICA ptcoma fin_funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUCCION ::= funcion variables tipoDato con_parametros parA VARNAMEMF parC INSTRUCCIONES retornar EXPRESIONRELACIONAL ptcoma fin_funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$6 ::= 
            {
              String RESULT =null;
listaTokens.addNode("","","","","REPETIR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUCCION ::= repetir NT$6 INSTRUCCIONES hasta_que EXPRESIONLOGICA 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		listaTokens.addNode("",String.valueOf(a),"","","F_REPETIR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$7 ::= 
            {
              String RESULT =null;
listaTokens.addNode("","","","","REPETIR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTRUCCION ::= repetir NT$7 hasta_que EXPRESIONLOGICA 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		listaTokens.addNode("",String.valueOf(a),"","","F_REPETIR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$8 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
listaTokens.addNode("","("+String.valueOf(a)+")","","","SWICH");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$9 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
listaTokens.addNode("","","","","ELSECASE");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INSTRUCCION ::= segun ENUMERICA NT$8 hacer SEGUNOP de_lo_contrario entonces NT$9 INSTRUCCIONES fin_segun 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).value;
		listaTokens.addNode("","","","","F_SWICH");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$10 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
listaTokens.addNode(String.valueOf(a),"","","","METODO");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSTRUCCION ::= metodo variables NT$10 INSTRUCCIONES fin_metodo 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		listaTokens.addNode("","","","","F_METODO");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$11 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
listaTokens.addNode(String.valueOf(a),String.valueOf(b),"","","METODO");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSTRUCCION ::= metodo variables con_parametros parA VARNAMEMF parC NT$11 INSTRUCCIONES fin_metodo 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;
		listaTokens.addNode("","","","","F_METODO");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSTRUCCION ::= ejecutar variables parA parC ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		listaTokens.addNode("",String.valueOf(a),"","","EJECUTAR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INSTRUCCION ::= ejecutar variables parA EJECUCIONV parC ptcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		listaTokens.addNode("",String.valueOf(a),String.valueOf(b),"","EJECUTAR");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INSTRUCCION ::= DECLARACION 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INSTRUCCION ::= ASIGNACION 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INSTRUCCION ::= IMPRIMIRV 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INSTRUCCION ::= ENUMERICA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INSTRUCCION ::= comentario 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
