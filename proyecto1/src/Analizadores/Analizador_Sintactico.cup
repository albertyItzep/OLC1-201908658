package Analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;
import AcccionesGramaticales.Declaraciones;
// codigo de java.
parser code
{:
    // varible que guarda los tokens correctos
    public LinkedList<TError> ListaErresSintacticos = new LinkedList<TError>();
    public LinkedList<Object> AST;
    public Declaraciones listaTokens = new Declaraciones();
    public void syntax_error(Symbol s){
                TError error = new TError(String.valueOf(s.value),s.right,s.left,"Sintactico","Token inesperado");
                ListaErresSintacticos.add(error);
        }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
                TError error = new TError(String.valueOf(s.value),s.right,s.left,"Sintactico","Token inesperado");
                ListaErresSintacticos.add(error);
    }
    public LinkedList<Object> getAST(){
        return AST;
    }
:}
action code{:
String NumeroIngresado="";
:}
// definicion de terminales
terminal String inicio,fin;
terminal String numero,booleanR,tipoDato,coma;
terminal String mas,menos,por,division,potencia,mod,parA,parC,corA,corC;
terminal String mayorQue,menorQue,mayorOIgual,menorOIgual,igualLogico,or,and,not,diferente;
terminal String caracter,cadena,comentario;
terminal String mientras,hacer,fmientras;
terminal String si,o_si,de_lo_contrario,fi_si,entonces,segun,inteA,inteC,fin_segun;
terminal String ingresar,como,con_valor,variables,ptcoma,asignarValor;
terminal String para,hasta,fpara,con,incremental;
terminal String repetir,hasta_que,retornar;
terminal String metodo,con_parametros,fin_metodo,funcion,fin_funcion;
terminal String imprimir,imprimir_nl,ejecutar;
// no terminales
non terminal String OSI,VARNAME;
non terminal String INICIO,ASIGNACION,ASIGNACIONOTRAS,DECLARACION,ENUMERICA,EXPRESIONLOGICA, EXPRESIONRELACIONAL,INI;
non terminal String INSTRUCCIONES;
non terminal String INSTRUCCION;
non terminal String SEGUNOP , VARNAMEMF,EJECUCIONV,IMPRIMIRV;
//precedencias gerarquicas
precedence left mas,menos;
precedence left division,por;
precedence left potencia,mod;

precedence right not;

// gramaticas

start with INICIO;

INICIO::=inicio INI fin;
INI::= INSTRUCCIONES;
// operaciones aritmeticas
ENUMERICA::= ENUMERICA:a mas ENUMERICA:b{:RESULT=String.valueOf(a)+"+"+String.valueOf(b);:}
    |ENUMERICA:a  menos ENUMERICA:b {:RESULT=String.valueOf(a)+"-"+String.valueOf(b);:}
    |ENUMERICA:a por ENUMERICA:b {:RESULT=String.valueOf(a)+"*"+String.valueOf(b);:}
    |ENUMERICA:a division ENUMERICA:b {:RESULT=String.valueOf(a)+"/"+String.valueOf(b);:}
    |ENUMERICA:a potencia ENUMERICA:b {:RESULT=String.valueOf(a)+"potencia"+String.valueOf(b);:}
    |ENUMERICA:a mod ENUMERICA:b {:RESULT=String.valueOf(a)+"%"+String.valueOf(b);:}
    |parA ENUMERICA:a parC {:RESULT="("+String.valueOf(a)+")";:}
    |corA ENUMERICA:a corC {:RESULT="["+String.valueOf(a)+"]";:}
    |numero:a{:RESULT=String.valueOf(a);:}
    |variables:a{:RESULT=String.valueOf(a);:}
    |error
;
EXPRESIONRELACIONAL::= ENUMERICA:a mayorQue ENUMERICA:b {:RESULT=String.valueOf(a)+">"+String.valueOf(b);:}
    |ENUMERICA:a menorQue ENUMERICA:b {:RESULT=String.valueOf(a)+"<"+String.valueOf(b);:}
    |ENUMERICA:a mayorOIgual ENUMERICA:b {:RESULT=String.valueOf(a)+">="+String.valueOf(b);:}
    |ENUMERICA:a menorOIgual ENUMERICA:b {:RESULT=String.valueOf(a)+"<="+String.valueOf(b);:}
    |ENUMERICA:a igualLogico ENUMERICA:b {:RESULT=String.valueOf(a)+"=="+String.valueOf(b);:}
    |cadena:a igualLogico cadena:b {:RESULT=String.valueOf(a)+"=="+String.valueOf(b);:}
    |caracter:a igualLogico caracter:b {:RESULT=String.valueOf(a)+"=="+String.valueOf(b);:}
    |ENUMERICA:a diferente ENUMERICA:b {:RESULT=String.valueOf(a)+"!="+String.valueOf(b);:}
    |caracter:a diferente caracter:b {:RESULT=String.valueOf(a)+"!="+String.valueOf(b);:}
    |cadena:a diferente cadena:b {:RESULT=String.valueOf(a)+"!="+String.valueOf(b);:}
    |parA EXPRESIONRELACIONAL:a parC {:RESULT="("+String.valueOf(a)+")";:}
;
ASIGNACION::=
    VARNAME:a asignarValor ENUMERICA:b ptcoma {:listaTokens.addNode(String.valueOf(a),String.valueOf(b),"","","ASIGNACION");:}
    |VARNAME:a asignarValor cadena:b ptcoma {:listaTokens.addNode(String.valueOf(a),String.valueOf(b),"","","ASIGNACION");:}
;
ASIGNACIONOTRAS::=
    VARNAME:a asignarValor ENUMERICA:b {:RESULT=String.valueOf(a)+"ASIGNAR"+String.valueOf(b);:}
;
DECLARACION::=ingresar VARNAME:a como tipoDato:b con_valor ENUMERICA:c ptcoma {:listaTokens.addNode(String.valueOf(a),String.valueOf(c),"",String.valueOf(b),"DECLARACION");:}
    |ingresar VARNAME:a como tipoDato:b con_valor cadena:c ptcoma {:listaTokens.addNode(String.valueOf(a),String.valueOf(c),"",String.valueOf(b),"DECLARACION");:}
    |ingresar VARNAME:a como tipoDato con_valor caracter:c ptcoma {:listaTokens.addNode(String.valueOf(a),String.valueOf(c),"","caracter","DECLARACION");:}
    |ingresar VARNAME:a como tipoDato:b con_valor booleanR:c ptcoma {:listaTokens.addNode(String.valueOf(a),String.valueOf(c),"",String.valueOf(b),"DECLARACION");:}
    |ingresar VARNAME:a como tipoDato:b con_valor EXPRESIONRELACIONAL:c ptcoma {:listaTokens.addNode(String.valueOf(a),String.valueOf(c),"",String.valueOf(b),"DECLARACION");:}
    ;
VARNAME::= variables:a {:RESULT = String.valueOf(a);:}
    |VARNAME:a coma:b variables:c {:RESULT = String.valueOf(a)+String.valueOf(b)+String.valueOf(c);:}
    ;
VARNAMEMF::= variables:a tipoDato:b {:RESULT=String.valueOf(a)+" "+String.valueOf(b);:}
    | VARNAMEMF:a coma variables:b tipoDato:c {:RESULT=String.valueOf(a)+", "+String.valueOf(b)+" "+String.valueOf(c);:}
    ;
EXPRESIONLOGICA::= EXPRESIONRELACIONAL:a or EXPRESIONRELACIONAL:b {:RESULT=String.valueOf(a)+"OR"+String.valueOf(b);:}
    |EXPRESIONRELACIONAL:a and EXPRESIONRELACIONAL:b {:RESULT=String.valueOf(a)+"AND"+String.valueOf(b);:}
    |not EXPRESIONRELACIONAL:a {:RESULT="NOT "+String.valueOf(a);:}
    |EXPRESIONRELACIONAL:a {:RESULT=String.valueOf(a);:}
    ;
INSTRUCCIONES::= INSTRUCCIONES INSTRUCCION
    |INSTRUCCION
    ;
EJECUCIONV::=ENUMERICA:a {:RESULT=String.valueOf(a);:}
    |EJECUCIONV:b coma ENUMERICA:a {:RESULT=String.valueOf(b)+", "+String.valueOf(a);:}
    |cadena:a {:RESULT=String.valueOf(a);:}
    |EJECUCIONV:b coma cadena:a {:RESULT=String.valueOf(b)+", "+String.valueOf(a);:}
    |caracter:a {:RESULT=String.valueOf(a);:}
    |EJECUCIONV:b coma caracter:a {:RESULT=String.valueOf(b)+", "+String.valueOf(a);:}
    |EXPRESIONRELACIONAL:a {:RESULT=String.valueOf(a);:}
    |EJECUCIONV:b coma EXPRESIONRELACIONAL:a {:RESULT=String.valueOf(b)+", "+String.valueOf(a);:}
    |booleanR:a {:RESULT=String.valueOf(a);:}
    |EJECUCIONV:b coma booleanR:a {:RESULT=String.valueOf(b)+", "+String.valueOf(a);:}
;

IMPRIMIRV::= imprimir cadena:a ptcoma {:listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIR");:}
    |imprimir caracter:a ptcoma {:listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIR");:}
    |imprimir ENUMERICA:a ptcoma {:listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIR");:}
    |imprimir EXPRESIONRELACIONAL:a ptcoma {:listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIR");:}
    |imprimir parA cadena:a parC ptcoma {:listaTokens.addNode("","("+String.valueOf(a)+")","","","IMPRIMIR");:}
    |imprimir parA caracter:a parC ptcoma {:listaTokens.addNode("","("+String.valueOf(a)+")","","","IMPRIMIR");:}
    |imprimir_nl cadena:a ptcoma {:listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIRLN");:}
    |imprimir_nl caracter:a ptcoma {:listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIRLN");:}
    |imprimir_nl ENUMERICA:a ptcoma {:listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIRLN");:}
    |imprimir_nl EXPRESIONRELACIONAL:a ptcoma {:listaTokens.addNode("",String.valueOf(a),"","","IMPRIMIRLN");:}
    |imprimir_nl parA cadena:a parC ptcoma {:listaTokens.addNode("","("+String.valueOf(a)+")","","","IMPRIMIRLN");:}
    |imprimir_nl parA caracter:a parC ptcoma {:listaTokens.addNode("","("+String.valueOf(a)+")","","","IMPRIMIRLN");:}
;

OSI::= OSI o_si EXPRESIONLOGICA:a{:listaTokens.addNode("",String.valueOf(a),"","","ELSEIF");:} entonces INSTRUCCIONES {:listaTokens.addNode("","","","","F_ELSEIF");:}
    | o_si EXPRESIONLOGICA:a entonces {:listaTokens.addNode("",String.valueOf(a),"","","ELSEIF");:} INSTRUCCIONES
    ;

SEGUNOP::= SEGUNOP inteA ENUMERICA:a inteC entonces {:listaTokens.addNode("",String.valueOf(a),"","","CASE");:} INSTRUCCIONES {:listaTokens.addNode("","","","","F_CASE");:}
    |inteA ENUMERICA:a inteC entonces {:listaTokens.addNode("",String.valueOf(a),"","","CASE");:} INSTRUCCIONES {:listaTokens.addNode("","","","","F_CASE");:}
;
INSTRUCCION::=
     mientras EXPRESIONLOGICA:a hacer {:listaTokens.addNode("",String.valueOf(a),"","","MIENTRAS");:} fmientras {:listaTokens.addNode("","","","","F_MIENTRAS");:}
    |mientras EXPRESIONLOGICA:a hacer {:listaTokens.addNode("","("+String.valueOf(a)+")","","","MIENTRAS");:} INSTRUCCIONES fmientras {:listaTokens.addNode("","","","","F_MIENTRAS");:}
    |si EXPRESIONLOGICA:a  entonces INSTRUCCIONES fi_si {:System.out.println("hola");:}
    |si EXPRESIONLOGICA entonces INSTRUCCIONES de_lo_contrario INSTRUCCIONES fi_si
    |si EXPRESIONLOGICA entonces INSTRUCCIONES OSI de_lo_contrario INSTRUCCIONES fi_si
    |para ASIGNACIONOTRAS hasta ENUMERICA hacer INSTRUCCIONES fpara
    |para ASIGNACIONOTRAS hasta ENUMERICA hacer fpara
    |para ASIGNACIONOTRAS hasta ENUMERICA con incremental ENUMERICA hacer INSTRUCCIONES fpara
    |funcion variables tipoDato INSTRUCCIONES fin_funcion
    |funcion variables tipoDato retornar ENUMERICA ptcoma fin_funcion
    |funcion variables tipoDato retornar EXPRESIONLOGICA ptcoma fin_funcion
    |funcion variables tipoDato INSTRUCCIONES retornar ENUMERICA ptcoma fin_funcion
    |funcion variables tipoDato INSTRUCCIONES retornar EXPRESIONLOGICA ptcoma fin_funcion
    |funcion variables tipoDato con_parametros parA VARNAMEMF parC INSTRUCCIONES fin_funcion
    |funcion variables tipoDato con_parametros parA VARNAMEMF parC retornar ENUMERICA ptcoma fin_funcion
    |funcion variables tipoDato con_parametros parA VARNAMEMF parC retornar EXPRESIONRELACIONAL ptcoma fin
    |funcion variables tipoDato con_parametros parA VARNAMEMF parC INSTRUCCIONES retornar ENUMERICA ptcoma fin_funcion
    |funcion variables tipoDato con_parametros parA VARNAMEMF parC INSTRUCCIONES retornar EXPRESIONRELACIONAL ptcoma fin_funcion
    |repetir{:listaTokens.addNode("","","","","REPETIR");:} INSTRUCCIONES hasta_que EXPRESIONLOGICA:a {:listaTokens.addNode("",String.valueOf(a),"","","F_REPETIR");:}
    |repetir{:listaTokens.addNode("","","","","REPETIR");:} hasta_que EXPRESIONLOGICA:a {:listaTokens.addNode("",String.valueOf(a),"","","F_REPETIR");:}
    |segun ENUMERICA:a {:listaTokens.addNode("","("+String.valueOf(a)+")","","","SWICH");:} hacer SEGUNOP de_lo_contrario entonces {:listaTokens.addNode("","","","","ELSECASE");:} INSTRUCCIONES fin_segun{:listaTokens.addNode("","","","","F_SWICH");:}
    |metodo variables:a {:listaTokens.addNode(String.valueOf(a),"","","","METODO");:} INSTRUCCIONES fin_metodo {:listaTokens.addNode("","","","","F_METODO");:}
    |metodo variables:a con_parametros parA VARNAMEMF:b parC {:listaTokens.addNode(String.valueOf(a),String.valueOf(b),"","","METODO");:} INSTRUCCIONES fin_metodo {:listaTokens.addNode("","","","","F_METODO");:}
    |ejecutar variables:a parA parC ptcoma{:listaTokens.addNode("",String.valueOf(a),"","","EJECUTAR");:}
    |ejecutar variables:a parA EJECUCIONV:b parC ptcoma {:listaTokens.addNode("",String.valueOf(a),String.valueOf(b),"","EJECUTAR");:}
    |DECLARACION
    |ASIGNACION
    |IMPRIMIRV
    |ENUMERICA
    |comentario
    ;

